{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "definitions": {
    "Event": {
      "properties": {
        "contract_address": {
          "$ref": "#/definitions/HexBinary"
        },
        "data": {
          "$ref": "#/definitions/HexBinary"
        },
        "event_index": {
          "format": "uint64",
          "minimum": 0.0,
          "type": "integer"
        },
        "topics": {
          "items": {
            "$ref": "#/definitions/HexBinary"
          },
          "type": "array"
        }
      },
      "required": [
        "contract_address",
        "data",
        "event_index",
        "topics"
      ],
      "type": "object"
    },
    "EvmEvent": {
      "properties": {
        "events": {
          "items": {
            "$ref": "#/definitions/Event"
          },
          "type": "array"
        },
        "transaction_details": {
          "anyOf": [
            {
              "$ref": "#/definitions/TransactionDetails"
            },
            {
              "type": "null"
            }
          ]
        },
        "transaction_hash": {
          "$ref": "#/definitions/HexBinary"
        }
      },
      "required": [
        "events",
        "transaction_hash"
      ],
      "type": "object"
    },
    "HexBinary": {
      "description": "This is a wrapper around Vec<u8> to add hex de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is similar to `cosmwasm_std::Binary` but uses hex. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
      "type": "string"
    },
    "TransactionDetails": {
      "properties": {
        "calldata": {
          "$ref": "#/definitions/HexBinary"
        },
        "from": {
          "$ref": "#/definitions/HexBinary"
        },
        "to": {
          "$ref": "#/definitions/HexBinary"
        },
        "value": {
          "$ref": "#/definitions/Uint256"
        }
      },
      "required": [
        "calldata",
        "from",
        "to",
        "value"
      ],
      "type": "object"
    },
    "Uint256": {
      "description": "An implementation of u256 that is using strings for JSON encoding/decoding, such that the full u256 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances out of primitive uint types or `new` to provide big endian bytes:\n\n``` # use cosmwasm_std::Uint256; let a = Uint256::from(258u128); let b = Uint256::new([ 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 2u8, ]); assert_eq!(a, b); ```",
      "type": "string"
    }
  },
  "description": "JSON schema for the EventData structure that gets serialized into the event_data string field",
  "examples": [
    {
      "evm": {
        "events": [
          {
            "contract_address": "5425890298aed601595a70ab815c96711a31bc65",
            "data": "000000000000000000000000000000000000000000000000000000aa910f88c4",
            "event_index": 0,
            "topics": [
              "8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
              "0000000000000000000000006aa9f4fe1ce6fa00f06f2fe4bb6365180bc3a621",
              "000000000000000000000000e233862be9e5ff645e25ce6a001cf1fec28097c8"
            ]
          }
        ],
        "transaction_details": null,
        "transaction_hash": "7cedbb3799cd99636045c84c5c55aef8a138f107ac8ba53a08cad1070ba4385b"
      }
    },
    {
      "evm": {
        "events": [
          {
            "contract_address": "5425890298aed601595a70ab815c96711a31bc65",
            "data": "000000000000000000000000000000000000000000000000000000aa910f88c4",
            "event_index": 0,
            "topics": [
              "ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
              "0000000000000000000000006aa9f4fe1ce6fa00f06f2fe4bb6365180bc3a621",
              "000000000000000000000000e233862be9e5ff645e25ce6a001cf1fec28097c8"
            ]
          }
        ],
        "transaction_details": {
          "calldata": "a9059cbb000000000000000000000000e233862be9e5ff645e25ce6a001cf1fec28097c800000000000000000000000000000000000000000000000000000000aa910f88c4",
          "from": "6aa9f4fe1ce6fa00f06f2fe4bb6365180bc3a621",
          "to": "5425890298aed601595a70ab815c96711a31bc65",
          "value": "0"
        },
        "transaction_hash": "7cedbb3799cd99636045c84c5c55aef8a138f107ac8ba53a08cad1070ba4385b"
      }
    }
  ],
  "generated_at": "2025-10-10T16:01:48.382518+00:00",
  "oneOf": [
    {
      "additionalProperties": false,
      "properties": {
        "evm": {
          "$ref": "#/definitions/EvmEvent"
        }
      },
      "required": [
        "evm"
      ],
      "type": "object"
    }
  ],
  "title": "EventData Schema",
  "version": "1.0.0"
}