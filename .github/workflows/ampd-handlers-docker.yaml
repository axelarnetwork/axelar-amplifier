name: ampd-handlers - Build and push images to ECR

on:
  push:
    branches:
      - main
    paths:
      - 'ampd-handlers/**'
      - 'packages/ampd-sdk/**'
      - '.github/workflows/ampd-handlers-docker.yaml'
  workflow_dispatch:
    inputs:
      handler:
        description: 'Handler to build (leave empty for all)'
        required: false
        type: choice
        options:
          - '' # All handlers
          - evm # List to be updated with all handlers
        default: ''
      ref:
        description: 'Git ref (branch/commit/tag) to build from'
        required: false
        default: 'main'
      tag:
        description: 'Custom tag (leave empty to use git sha or tag name)'
        required: false
        default: ''

jobs:
  setup:
    runs-on: blacksmith-4vcpu-ubuntu-2204
    outputs:
      handlers: ${{ steps.set-handlers.outputs.handlers }}
      image-tag: ${{ steps.set-tag.outputs.tag }}
      should-build: ${{ steps.check-handlers.outputs.should-build }}
    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          ref: ${{ github.event.inputs.ref || github.ref }}
          fetch-depth: 0

      - name: Check which handlers exist
        id: check-handlers
        run: |
          if [ -d "ampd-handlers/src/bin" ]; then
            handlers=$(ls -d ampd-handlers/src/bin/*/ 2>/dev/null | xargs -n1 basename | jq -R -s -c 'split("\n") | map(select(length > 0))')
            echo "Available handlers: $handlers"
            echo "should-build=true" >> $GITHUB_OUTPUT
          else
            echo "No handlers found"
            echo "should-build=false" >> $GITHUB_OUTPUT
            handlers='[]'
          fi
          echo "available-handlers=$handlers" >> $GITHUB_OUTPUT

      - name: Set handlers to build
        id: set-handlers
        run: |
          if [ "${{ github.event_name }}" == "push" ]; then
            # On push to main, build all handlers
            handlers='${{ steps.check-handlers.outputs.available-handlers }}'
          elif [ -n "${{ github.event.inputs.handler }}" ]; then
            # Manual trigger with specific handler
            handlers='["${{ github.event.inputs.handler }}"]'
          else
            # Manual trigger without handler specified - build all
            handlers='${{ steps.check-handlers.outputs.available-handlers }}'
          fi
          echo "handlers=$handlers" >> $GITHUB_OUTPUT
          echo "Building handlers: $handlers"

      - name: Set image tag
        id: set-tag
        run: |
          if [ -n "${{ github.event.inputs.tag }}" ]; then
            # Use custom tag if provided
            tag="${{ github.event.inputs.tag }}"
          elif [ "${{ github.ref_type }}" == "tag" ]; then
            # If triggered by a tag, use the tag name
            tag="${{ github.ref_name }}"
          else
            # Otherwise use commit SHA
            tag="${{ github.sha }}"
          fi
          echo "tag=$tag" >> $GITHUB_OUTPUT
          echo "Using tag: $tag"

  build-and-push:
    needs: setup
    if: needs.setup.outputs.should-build == 'true'
    runs-on: blacksmith-16vcpu-ubuntu-2204
    permissions:
      id-token: write
      contents: read
      packages: write
    strategy:
      matrix:
        handler: ${{ fromJson(needs.setup.outputs.handlers) }}
    env:
      REPOSITORY: axelar-ampd-event-handler
      HANDLER: ${{ matrix.handler }}
      IMAGE_TAG: ${{ matrix.handler }}-${{ needs.setup.outputs.image-tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          ref: ${{ github.event.inputs.ref || github.ref }}
          submodules: recursive

      - name: Fetch tags
        run: |
          git fetch --unshallow || true

      # Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@67fbcbb121271f7775d2e7715933280b06314838 # v1
        with:
          aws-region: us-east-2
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/ghwf-${{ github.event.repository.name }}

      # Login to Amazon ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@062b18b96a7aff071d4dc91bc00c4c1a7945b076 # v2

      # Check if image already exists in ECR
      - name: Check if image already exists in ECR
        id: image-tag-check
        run: |
          image_tag_exists=$(aws ecr batch-get-image --repository-name ${REPOSITORY} --image-ids "imageTag=${IMAGE_TAG}" 2>/dev/null | jq '.images | length' || echo "0")
          echo "image_tag_exists=${image_tag_exists}" >> $GITHUB_OUTPUT
          echo "Image exists: ${image_tag_exists}"

      - name: Set up Docker Buildx
        if: steps.image-tag-check.outputs.image_tag_exists == '0'
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3

      - name: Build and push Docker image
        if: steps.image-tag-check.outputs.image_tag_exists == '0'
        uses: useblacksmith/build-push-action@574eb0ee0b59c6a687ace24192f0727dfb65d6d7 # v1
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        with:
          context: .
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.REPOSITORY }}:${{ env.IMAGE_TAG }}
            ${{ env.REGISTRY }}/${{ env.REPOSITORY }}:${{ env.HANDLER }}-latest
          file: ampd-handlers/Dockerfile
          build-args: |
            HANDLER=${{ env.HANDLER }}

      - name: Image build summary
        if: steps.image-tag-check.outputs.image_tag_exists == '0'
        run: |
          echo "**Handler:** ${{ env.HANDLER }}" >> $GITHUB_STEP_SUMMARY
          echo "**Registry:** ECR" >> $GITHUB_STEP_SUMMARY
          echo "**Repository:** ${{ env.REPOSITORY }}" >> $GITHUB_STEP_SUMMARY
          echo "**Tags:**" >> $GITHUB_STEP_SUMMARY
          echo "- \`${{ env.IMAGE_TAG }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- \`${{ env.HANDLER }}-latest\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Full Image:**" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.login-ecr.outputs.registry }}/${{ env.REPOSITORY }}:${{ env.IMAGE_TAG }}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
